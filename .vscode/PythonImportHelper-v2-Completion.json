[
    {
        "label": "BinarySensorDeviceClass",
        "importPath": "homeassistant.components.binary_sensor",
        "description": "homeassistant.components.binary_sensor",
        "isExtraImport": true,
        "detail": "homeassistant.components.binary_sensor",
        "documentation": {}
    },
    {
        "label": "BinarySensorEntity",
        "importPath": "homeassistant.components.binary_sensor",
        "description": "homeassistant.components.binary_sensor",
        "isExtraImport": true,
        "detail": "homeassistant.components.binary_sensor",
        "documentation": {}
    },
    {
        "label": "BinarySensorEntityDescription",
        "importPath": "homeassistant.components.binary_sensor",
        "description": "homeassistant.components.binary_sensor",
        "isExtraImport": true,
        "detail": "homeassistant.components.binary_sensor",
        "documentation": {}
    },
    {
        "label": "ConfigEntry",
        "importPath": "homeassistant.config_entries",
        "description": "homeassistant.config_entries",
        "isExtraImport": true,
        "detail": "homeassistant.config_entries",
        "documentation": {}
    },
    {
        "label": "ConfigEntry",
        "importPath": "homeassistant.config_entries",
        "description": "homeassistant.config_entries",
        "isExtraImport": true,
        "detail": "homeassistant.config_entries",
        "documentation": {}
    },
    {
        "label": "ConfigFlow",
        "importPath": "homeassistant.config_entries",
        "description": "homeassistant.config_entries",
        "isExtraImport": true,
        "detail": "homeassistant.config_entries",
        "documentation": {}
    },
    {
        "label": "ConfigFlowResult",
        "importPath": "homeassistant.config_entries",
        "description": "homeassistant.config_entries",
        "isExtraImport": true,
        "detail": "homeassistant.config_entries",
        "documentation": {}
    },
    {
        "label": "ConfigEntry",
        "importPath": "homeassistant.config_entries",
        "description": "homeassistant.config_entries",
        "isExtraImport": true,
        "detail": "homeassistant.config_entries",
        "documentation": {}
    },
    {
        "label": "ConfigEntry",
        "importPath": "homeassistant.config_entries",
        "description": "homeassistant.config_entries",
        "isExtraImport": true,
        "detail": "homeassistant.config_entries",
        "documentation": {}
    },
    {
        "label": "ConfigEntry",
        "importPath": "homeassistant.config_entries",
        "description": "homeassistant.config_entries",
        "isExtraImport": true,
        "detail": "homeassistant.config_entries",
        "documentation": {}
    },
    {
        "label": "ConfigEntry",
        "importPath": "homeassistant.config_entries",
        "description": "homeassistant.config_entries",
        "isExtraImport": true,
        "detail": "homeassistant.config_entries",
        "documentation": {}
    },
    {
        "label": "ConfigEntry",
        "importPath": "homeassistant.config_entries",
        "description": "homeassistant.config_entries",
        "isExtraImport": true,
        "detail": "homeassistant.config_entries",
        "documentation": {}
    },
    {
        "label": "HomeAssistant",
        "importPath": "homeassistant.core",
        "description": "homeassistant.core",
        "isExtraImport": true,
        "detail": "homeassistant.core",
        "documentation": {}
    },
    {
        "label": "HomeAssistant",
        "importPath": "homeassistant.core",
        "description": "homeassistant.core",
        "isExtraImport": true,
        "detail": "homeassistant.core",
        "documentation": {}
    },
    {
        "label": "HomeAssistant",
        "importPath": "homeassistant.core",
        "description": "homeassistant.core",
        "isExtraImport": true,
        "detail": "homeassistant.core",
        "documentation": {}
    },
    {
        "label": "HomeAssistant",
        "importPath": "homeassistant.core",
        "description": "homeassistant.core",
        "isExtraImport": true,
        "detail": "homeassistant.core",
        "documentation": {}
    },
    {
        "label": "HomeAssistant",
        "importPath": "homeassistant.core",
        "description": "homeassistant.core",
        "isExtraImport": true,
        "detail": "homeassistant.core",
        "documentation": {}
    },
    {
        "label": "HomeAssistant",
        "importPath": "homeassistant.core",
        "description": "homeassistant.core",
        "isExtraImport": true,
        "detail": "homeassistant.core",
        "documentation": {}
    },
    {
        "label": "HomeAssistant",
        "importPath": "homeassistant.core",
        "description": "homeassistant.core",
        "isExtraImport": true,
        "detail": "homeassistant.core",
        "documentation": {}
    },
    {
        "label": "HomeAssistant",
        "importPath": "homeassistant.core",
        "description": "homeassistant.core",
        "isExtraImport": true,
        "detail": "homeassistant.core",
        "documentation": {}
    },
    {
        "label": "AddEntitiesCallback",
        "importPath": "homeassistant.helpers.entity_platform",
        "description": "homeassistant.helpers.entity_platform",
        "isExtraImport": true,
        "detail": "homeassistant.helpers.entity_platform",
        "documentation": {}
    },
    {
        "label": "AddEntitiesCallback",
        "importPath": "homeassistant.helpers.entity_platform",
        "description": "homeassistant.helpers.entity_platform",
        "isExtraImport": true,
        "detail": "homeassistant.helpers.entity_platform",
        "documentation": {}
    },
    {
        "label": "AddEntitiesCallback",
        "importPath": "homeassistant.helpers.entity_platform",
        "description": "homeassistant.helpers.entity_platform",
        "isExtraImport": true,
        "detail": "homeassistant.helpers.entity_platform",
        "documentation": {}
    },
    {
        "label": "AddEntitiesCallback",
        "importPath": "homeassistant.helpers.entity_platform",
        "description": "homeassistant.helpers.entity_platform",
        "isExtraImport": true,
        "detail": "homeassistant.helpers.entity_platform",
        "documentation": {}
    },
    {
        "label": "AddEntitiesCallback",
        "importPath": "homeassistant.helpers.entity_platform",
        "description": "homeassistant.helpers.entity_platform",
        "isExtraImport": true,
        "detail": "homeassistant.helpers.entity_platform",
        "documentation": {}
    },
    {
        "label": "AddEntitiesCallback",
        "importPath": "homeassistant.helpers.entity_platform",
        "description": "homeassistant.helpers.entity_platform",
        "isExtraImport": true,
        "detail": "homeassistant.helpers.entity_platform",
        "documentation": {}
    },
    {
        "label": "AddEntitiesCallback",
        "importPath": "homeassistant.helpers.entity_platform",
        "description": "homeassistant.helpers.entity_platform",
        "isExtraImport": true,
        "detail": "homeassistant.helpers.entity_platform",
        "documentation": {}
    },
    {
        "label": "DiscoveryInfoType",
        "importPath": "homeassistant.helpers.typing",
        "description": "homeassistant.helpers.typing",
        "isExtraImport": true,
        "detail": "homeassistant.helpers.typing",
        "documentation": {}
    },
    {
        "label": "DiscoveryInfoType",
        "importPath": "homeassistant.helpers.typing",
        "description": "homeassistant.helpers.typing",
        "isExtraImport": true,
        "detail": "homeassistant.helpers.typing",
        "documentation": {}
    },
    {
        "label": "DiscoveryInfoType",
        "importPath": "homeassistant.helpers.typing",
        "description": "homeassistant.helpers.typing",
        "isExtraImport": true,
        "detail": "homeassistant.helpers.typing",
        "documentation": {}
    },
    {
        "label": "DiscoveryInfoType",
        "importPath": "homeassistant.helpers.typing",
        "description": "homeassistant.helpers.typing",
        "isExtraImport": true,
        "detail": "homeassistant.helpers.typing",
        "documentation": {}
    },
    {
        "label": "DiscoveryInfoType",
        "importPath": "homeassistant.helpers.typing",
        "description": "homeassistant.helpers.typing",
        "isExtraImport": true,
        "detail": "homeassistant.helpers.typing",
        "documentation": {}
    },
    {
        "label": "DiscoveryInfoType",
        "importPath": "homeassistant.helpers.typing",
        "description": "homeassistant.helpers.typing",
        "isExtraImport": true,
        "detail": "homeassistant.helpers.typing",
        "documentation": {}
    },
    {
        "label": "common",
        "importPath": "myskoda",
        "description": "myskoda",
        "isExtraImport": true,
        "detail": "myskoda",
        "documentation": {}
    },
    {
        "label": "RestApi",
        "importPath": "myskoda",
        "description": "myskoda",
        "isExtraImport": true,
        "detail": "myskoda",
        "documentation": {}
    },
    {
        "label": "MySkoda",
        "importPath": "myskoda",
        "description": "myskoda",
        "isExtraImport": true,
        "detail": "myskoda",
        "documentation": {}
    },
    {
        "label": "Vehicle",
        "importPath": "myskoda",
        "description": "myskoda",
        "isExtraImport": true,
        "detail": "myskoda",
        "documentation": {}
    },
    {
        "label": "Vehicle",
        "importPath": "myskoda",
        "description": "myskoda",
        "isExtraImport": true,
        "detail": "myskoda",
        "documentation": {}
    },
    {
        "label": "Vehicle",
        "importPath": "myskoda",
        "description": "myskoda",
        "isExtraImport": true,
        "detail": "myskoda",
        "documentation": {}
    },
    {
        "label": "AirConditioning",
        "importPath": "myskoda.models.air_conditioning",
        "description": "myskoda.models.air_conditioning",
        "isExtraImport": true,
        "detail": "myskoda.models.air_conditioning",
        "documentation": {}
    },
    {
        "label": "AirConditioning",
        "importPath": "myskoda.models.air_conditioning",
        "description": "myskoda.models.air_conditioning",
        "isExtraImport": true,
        "detail": "myskoda.models.air_conditioning",
        "documentation": {}
    },
    {
        "label": "AirConditioning",
        "importPath": "myskoda.models.air_conditioning",
        "description": "myskoda.models.air_conditioning",
        "isExtraImport": true,
        "detail": "myskoda.models.air_conditioning",
        "documentation": {}
    },
    {
        "label": "DoorLockedState",
        "importPath": "myskoda.models.common",
        "description": "myskoda.models.common",
        "isExtraImport": true,
        "detail": "myskoda.models.common",
        "documentation": {}
    },
    {
        "label": "OnOffState",
        "importPath": "myskoda.models.common",
        "description": "myskoda.models.common",
        "isExtraImport": true,
        "detail": "myskoda.models.common",
        "documentation": {}
    },
    {
        "label": "OpenState",
        "importPath": "myskoda.models.common",
        "description": "myskoda.models.common",
        "isExtraImport": true,
        "detail": "myskoda.models.common",
        "documentation": {}
    },
    {
        "label": "ActiveState",
        "importPath": "myskoda.models.common",
        "description": "myskoda.models.common",
        "isExtraImport": true,
        "detail": "myskoda.models.common",
        "documentation": {}
    },
    {
        "label": "OnOffState",
        "importPath": "myskoda.models.common",
        "description": "myskoda.models.common",
        "isExtraImport": true,
        "detail": "myskoda.models.common",
        "documentation": {}
    },
    {
        "label": "CapabilityId",
        "importPath": "myskoda.models.info",
        "description": "myskoda.models.info",
        "isExtraImport": true,
        "detail": "myskoda.models.info",
        "documentation": {}
    },
    {
        "label": "CapabilityId",
        "importPath": "myskoda.models.info",
        "description": "myskoda.models.info",
        "isExtraImport": true,
        "detail": "myskoda.models.info",
        "documentation": {}
    },
    {
        "label": "CapabilityId",
        "importPath": "myskoda.models.info",
        "description": "myskoda.models.info",
        "isExtraImport": true,
        "detail": "myskoda.models.info",
        "documentation": {}
    },
    {
        "label": "CapabilityId",
        "importPath": "myskoda.models.info",
        "description": "myskoda.models.info",
        "isExtraImport": true,
        "detail": "myskoda.models.info",
        "documentation": {}
    },
    {
        "label": "CapabilityId",
        "importPath": "myskoda.models.info",
        "description": "myskoda.models.info",
        "isExtraImport": true,
        "detail": "myskoda.models.info",
        "documentation": {}
    },
    {
        "label": "CapabilityId",
        "importPath": "myskoda.models.info",
        "description": "myskoda.models.info",
        "isExtraImport": true,
        "detail": "myskoda.models.info",
        "documentation": {}
    },
    {
        "label": "CapabilityId",
        "importPath": "myskoda.models.info",
        "description": "myskoda.models.info",
        "isExtraImport": true,
        "detail": "myskoda.models.info",
        "documentation": {}
    },
    {
        "label": "Status",
        "importPath": "myskoda.models.status",
        "description": "myskoda.models.status",
        "isExtraImport": true,
        "detail": "myskoda.models.status",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "ClimateEntity",
        "importPath": "homeassistant.components.climate",
        "description": "homeassistant.components.climate",
        "isExtraImport": true,
        "detail": "homeassistant.components.climate",
        "documentation": {}
    },
    {
        "label": "ClimateEntityDescription",
        "importPath": "homeassistant.components.climate",
        "description": "homeassistant.components.climate",
        "isExtraImport": true,
        "detail": "homeassistant.components.climate",
        "documentation": {}
    },
    {
        "label": "ClimateEntityFeature",
        "importPath": "homeassistant.components.climate",
        "description": "homeassistant.components.climate",
        "isExtraImport": true,
        "detail": "homeassistant.components.climate",
        "documentation": {}
    },
    {
        "label": "HVACAction",
        "importPath": "homeassistant.components.climate",
        "description": "homeassistant.components.climate",
        "isExtraImport": true,
        "detail": "homeassistant.components.climate",
        "documentation": {}
    },
    {
        "label": "HVACMode",
        "importPath": "homeassistant.components.climate",
        "description": "homeassistant.components.climate",
        "isExtraImport": true,
        "detail": "homeassistant.components.climate",
        "documentation": {}
    },
    {
        "label": "ATTR_TEMPERATURE",
        "importPath": "homeassistant.const",
        "description": "homeassistant.const",
        "isExtraImport": true,
        "detail": "homeassistant.const",
        "documentation": {}
    },
    {
        "label": "UnitOfTemperature",
        "importPath": "homeassistant.const",
        "description": "homeassistant.const",
        "isExtraImport": true,
        "detail": "homeassistant.const",
        "documentation": {}
    },
    {
        "label": "PERCENTAGE",
        "importPath": "homeassistant.const",
        "description": "homeassistant.const",
        "isExtraImport": true,
        "detail": "homeassistant.const",
        "documentation": {}
    },
    {
        "label": "PERCENTAGE",
        "importPath": "homeassistant.const",
        "description": "homeassistant.const",
        "isExtraImport": true,
        "detail": "homeassistant.const",
        "documentation": {}
    },
    {
        "label": "UnitOfLength",
        "importPath": "homeassistant.const",
        "description": "homeassistant.const",
        "isExtraImport": true,
        "detail": "homeassistant.const",
        "documentation": {}
    },
    {
        "label": "UnitOfPower",
        "importPath": "homeassistant.const",
        "description": "homeassistant.const",
        "isExtraImport": true,
        "detail": "homeassistant.const",
        "documentation": {}
    },
    {
        "label": "UnitOfTime",
        "importPath": "homeassistant.const",
        "description": "homeassistant.const",
        "isExtraImport": true,
        "detail": "homeassistant.const",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "voluptuous",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "voluptuous",
        "description": "voluptuous",
        "detail": "voluptuous",
        "documentation": {}
    },
    {
        "label": "HomeAssistantError",
        "importPath": "homeassistant.exceptions",
        "description": "homeassistant.exceptions",
        "isExtraImport": true,
        "detail": "homeassistant.exceptions",
        "documentation": {}
    },
    {
        "label": "async_get_clientsession",
        "importPath": "homeassistant.helpers.aiohttp_client",
        "description": "homeassistant.helpers.aiohttp_client",
        "isExtraImport": true,
        "detail": "homeassistant.helpers.aiohttp_client",
        "documentation": {}
    },
    {
        "label": "async_get_clientsession",
        "importPath": "homeassistant.helpers.aiohttp_client",
        "description": "homeassistant.helpers.aiohttp_client",
        "isExtraImport": true,
        "detail": "homeassistant.helpers.aiohttp_client",
        "documentation": {}
    },
    {
        "label": "Coroutine",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Debouncer",
        "importPath": "homeassistant.helpers.debounce",
        "description": "homeassistant.helpers.debounce",
        "isExtraImport": true,
        "detail": "homeassistant.helpers.debounce",
        "documentation": {}
    },
    {
        "label": "DataUpdateCoordinator",
        "importPath": "homeassistant.helpers.update_coordinator",
        "description": "homeassistant.helpers.update_coordinator",
        "isExtraImport": true,
        "detail": "homeassistant.helpers.update_coordinator",
        "documentation": {}
    },
    {
        "label": "CoordinatorEntity",
        "importPath": "homeassistant.helpers.update_coordinator",
        "description": "homeassistant.helpers.update_coordinator",
        "isExtraImport": true,
        "detail": "homeassistant.helpers.update_coordinator",
        "documentation": {}
    },
    {
        "label": "get_default_context",
        "importPath": "homeassistant.util.ssl",
        "description": "homeassistant.util.ssl",
        "isExtraImport": true,
        "detail": "homeassistant.util.ssl",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "myskoda.event",
        "description": "myskoda.event",
        "isExtraImport": true,
        "detail": "myskoda.event",
        "documentation": {}
    },
    {
        "label": "EventAccess",
        "importPath": "myskoda.event",
        "description": "myskoda.event",
        "isExtraImport": true,
        "detail": "myskoda.event",
        "documentation": {}
    },
    {
        "label": "EventAirConditioning",
        "importPath": "myskoda.event",
        "description": "myskoda.event",
        "isExtraImport": true,
        "detail": "myskoda.event",
        "documentation": {}
    },
    {
        "label": "ServiceEventTopic",
        "importPath": "myskoda.event",
        "description": "myskoda.event",
        "isExtraImport": true,
        "detail": "myskoda.event",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "myskoda.models.user",
        "description": "myskoda.models.user",
        "isExtraImport": true,
        "detail": "myskoda.models.user",
        "documentation": {}
    },
    {
        "label": "EventCharging",
        "importPath": "myskoda.mqtt",
        "description": "myskoda.mqtt",
        "isExtraImport": true,
        "detail": "myskoda.mqtt",
        "documentation": {}
    },
    {
        "label": "EventType",
        "importPath": "myskoda.mqtt",
        "description": "myskoda.mqtt",
        "isExtraImport": true,
        "detail": "myskoda.mqtt",
        "documentation": {}
    },
    {
        "label": "TrackerEntity",
        "importPath": "homeassistant.components.device_tracker.config_entry",
        "description": "homeassistant.components.device_tracker.config_entry",
        "isExtraImport": true,
        "detail": "homeassistant.components.device_tracker.config_entry",
        "documentation": {}
    },
    {
        "label": "SourceType",
        "importPath": "homeassistant.components.device_tracker.const",
        "description": "homeassistant.components.device_tracker.const",
        "isExtraImport": true,
        "detail": "homeassistant.components.device_tracker.const",
        "documentation": {}
    },
    {
        "label": "EntityDescription",
        "importPath": "homeassistant.helpers.entity",
        "description": "homeassistant.helpers.entity",
        "isExtraImport": true,
        "detail": "homeassistant.helpers.entity",
        "documentation": {}
    },
    {
        "label": "DeviceInfo",
        "importPath": "homeassistant.helpers.entity",
        "description": "homeassistant.helpers.entity",
        "isExtraImport": true,
        "detail": "homeassistant.helpers.entity",
        "documentation": {}
    },
    {
        "label": "Position",
        "importPath": "myskoda.models.position",
        "description": "myskoda.models.position",
        "isExtraImport": true,
        "detail": "myskoda.models.position",
        "documentation": {}
    },
    {
        "label": "PositionType",
        "importPath": "myskoda.models.position",
        "description": "myskoda.models.position",
        "isExtraImport": true,
        "detail": "myskoda.models.position",
        "documentation": {}
    },
    {
        "label": "Positions",
        "importPath": "myskoda.models.position",
        "description": "myskoda.models.position",
        "isExtraImport": true,
        "detail": "myskoda.models.position",
        "documentation": {}
    },
    {
        "label": "NumberDeviceClass",
        "importPath": "homeassistant.components.number",
        "description": "homeassistant.components.number",
        "isExtraImport": true,
        "detail": "homeassistant.components.number",
        "documentation": {}
    },
    {
        "label": "NumberEntity",
        "importPath": "homeassistant.components.number",
        "description": "homeassistant.components.number",
        "isExtraImport": true,
        "detail": "homeassistant.components.number",
        "documentation": {}
    },
    {
        "label": "NumberEntityDescription",
        "importPath": "homeassistant.components.number",
        "description": "homeassistant.components.number",
        "isExtraImport": true,
        "detail": "homeassistant.components.number",
        "documentation": {}
    },
    {
        "label": "Settings",
        "importPath": "myskoda.models.charging",
        "description": "myskoda.models.charging",
        "isExtraImport": true,
        "detail": "myskoda.models.charging",
        "documentation": {}
    },
    {
        "label": "Charging",
        "importPath": "myskoda.models.charging",
        "description": "myskoda.models.charging",
        "isExtraImport": true,
        "detail": "myskoda.models.charging",
        "documentation": {}
    },
    {
        "label": "ChargingStatus",
        "importPath": "myskoda.models.charging",
        "description": "myskoda.models.charging",
        "isExtraImport": true,
        "detail": "myskoda.models.charging",
        "documentation": {}
    },
    {
        "label": "Charging",
        "importPath": "myskoda.models.charging",
        "description": "myskoda.models.charging",
        "isExtraImport": true,
        "detail": "myskoda.models.charging",
        "documentation": {}
    },
    {
        "label": "ChargingState",
        "importPath": "myskoda.models.charging",
        "description": "myskoda.models.charging",
        "isExtraImport": true,
        "detail": "myskoda.models.charging",
        "documentation": {}
    },
    {
        "label": "ChargingStatus",
        "importPath": "myskoda.models.charging",
        "description": "myskoda.models.charging",
        "isExtraImport": true,
        "detail": "myskoda.models.charging",
        "documentation": {}
    },
    {
        "label": "MaxChargeCurrent",
        "importPath": "myskoda.models.charging",
        "description": "myskoda.models.charging",
        "isExtraImport": true,
        "detail": "myskoda.models.charging",
        "documentation": {}
    },
    {
        "label": "Settings",
        "importPath": "myskoda.models.charging",
        "description": "myskoda.models.charging",
        "isExtraImport": true,
        "detail": "myskoda.models.charging",
        "documentation": {}
    },
    {
        "label": "SensorDeviceClass",
        "importPath": "homeassistant.components.sensor",
        "description": "homeassistant.components.sensor",
        "isExtraImport": true,
        "detail": "homeassistant.components.sensor",
        "documentation": {}
    },
    {
        "label": "SensorEntity",
        "importPath": "homeassistant.components.sensor",
        "description": "homeassistant.components.sensor",
        "isExtraImport": true,
        "detail": "homeassistant.components.sensor",
        "documentation": {}
    },
    {
        "label": "SensorEntityDescription",
        "importPath": "homeassistant.components.sensor",
        "description": "homeassistant.components.sensor",
        "isExtraImport": true,
        "detail": "homeassistant.components.sensor",
        "documentation": {}
    },
    {
        "label": "SensorStateClass",
        "importPath": "homeassistant.components.sensor",
        "description": "homeassistant.components.sensor",
        "isExtraImport": true,
        "detail": "homeassistant.components.sensor",
        "documentation": {}
    },
    {
        "label": "charging",
        "importPath": "myskoda.models",
        "description": "myskoda.models",
        "isExtraImport": true,
        "detail": "myskoda.models",
        "documentation": {}
    },
    {
        "label": "Health",
        "importPath": "myskoda.myskoda",
        "description": "myskoda.myskoda",
        "isExtraImport": true,
        "detail": "myskoda.myskoda",
        "documentation": {}
    },
    {
        "label": "Status",
        "importPath": "myskoda.myskoda",
        "description": "myskoda.myskoda",
        "isExtraImport": true,
        "detail": "myskoda.myskoda",
        "documentation": {}
    },
    {
        "label": "SwitchDeviceClass",
        "importPath": "homeassistant.components.switch",
        "description": "homeassistant.components.switch",
        "isExtraImport": true,
        "detail": "homeassistant.components.switch",
        "documentation": {}
    },
    {
        "label": "SwitchEntity",
        "importPath": "homeassistant.components.switch",
        "description": "homeassistant.components.switch",
        "isExtraImport": true,
        "detail": "homeassistant.components.switch",
        "documentation": {}
    },
    {
        "label": "SwitchEntityDescription",
        "importPath": "homeassistant.components.switch",
        "description": "homeassistant.components.switch",
        "isExtraImport": true,
        "detail": "homeassistant.components.switch",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "pformat",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "jmespath",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jmespath",
        "description": "jmespath",
        "detail": "jmespath",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "importPath": "jmespath",
        "description": "jmespath",
        "isExtraImport": true,
        "detail": "jmespath",
        "documentation": {}
    },
    {
        "label": "MySkodaBinarySensor",
        "kind": 6,
        "importPath": "custom_components.myskoda.binary_sensor",
        "description": "custom_components.myskoda.binary_sensor",
        "peekOfCode": "class MySkodaBinarySensor(MySkodaEntity, BinarySensorEntity):\n    pass\nclass AirConditioningBinarySensor(MySkodaBinarySensor):\n    def _air_conditioning(self) -> AirConditioning:\n        air_conditioning = self.vehicle.air_conditioning\n        if air_conditioning is None:\n            raise InvalidCapabilityConfigurationError(\n                self.entity_description.key, self.vehicle\n            )\n        return air_conditioning",
        "detail": "custom_components.myskoda.binary_sensor",
        "documentation": {}
    },
    {
        "label": "AirConditioningBinarySensor",
        "kind": 6,
        "importPath": "custom_components.myskoda.binary_sensor",
        "description": "custom_components.myskoda.binary_sensor",
        "peekOfCode": "class AirConditioningBinarySensor(MySkodaBinarySensor):\n    def _air_conditioning(self) -> AirConditioning:\n        air_conditioning = self.vehicle.air_conditioning\n        if air_conditioning is None:\n            raise InvalidCapabilityConfigurationError(\n                self.entity_description.key, self.vehicle\n            )\n        return air_conditioning\n    def required_capabilities(self) -> list[CapabilityId]:\n        return [CapabilityId.AIR_CONDITIONING]",
        "detail": "custom_components.myskoda.binary_sensor",
        "documentation": {}
    },
    {
        "label": "StatusBinarySensor",
        "kind": 6,
        "importPath": "custom_components.myskoda.binary_sensor",
        "description": "custom_components.myskoda.binary_sensor",
        "peekOfCode": "class StatusBinarySensor(MySkodaBinarySensor):\n    def _status(self) -> Status:\n        status = self.vehicle.status\n        if status is None:\n            raise InvalidCapabilityConfigurationError(\n                self.entity_description.key, self.vehicle\n            )\n        return status\n    def required_capabilities(self) -> list[CapabilityId]:\n        return [CapabilityId.STATE]",
        "detail": "custom_components.myskoda.binary_sensor",
        "documentation": {}
    },
    {
        "label": "ChargerConnected",
        "kind": 6,
        "importPath": "custom_components.myskoda.binary_sensor",
        "description": "custom_components.myskoda.binary_sensor",
        "peekOfCode": "class ChargerConnected(AirConditioningBinarySensor):\n    \"\"\"Detects if the charger is connected to the car.\"\"\"\n    entity_description = BinarySensorEntityDescription(\n        key=\"charger_connected\",\n        name=\"Charger Connected\",\n        device_class=BinarySensorDeviceClass.PLUG,\n        translation_key=\"charger_connected\",\n    )\n    @property\n    def is_on(self):  # noqa: D102",
        "detail": "custom_components.myskoda.binary_sensor",
        "documentation": {}
    },
    {
        "label": "ChargerLocked",
        "kind": 6,
        "importPath": "custom_components.myskoda.binary_sensor",
        "description": "custom_components.myskoda.binary_sensor",
        "peekOfCode": "class ChargerLocked(AirConditioningBinarySensor):\n    \"\"\"Detect if the charger is locked on the car, or whether it can be unplugged.\"\"\"\n    entity_description = BinarySensorEntityDescription(\n        key=\"charger_locked\",\n        name=\"Charger\",\n        device_class=BinarySensorDeviceClass.LOCK,\n        translation_key=\"charger_locked\",\n    )\n    @property\n    def is_on(self):  # noqa: D102",
        "detail": "custom_components.myskoda.binary_sensor",
        "documentation": {}
    },
    {
        "label": "Locked",
        "kind": 6,
        "importPath": "custom_components.myskoda.binary_sensor",
        "description": "custom_components.myskoda.binary_sensor",
        "peekOfCode": "class Locked(StatusBinarySensor):\n    \"\"\"Detects whether the vehicle is fully locked.\"\"\"\n    entity_description = BinarySensorEntityDescription(\n        key=\"locked\",\n        name=\"Locks\",\n        device_class=BinarySensorDeviceClass.LOCK,\n        translation_key=\"locked\",\n    )\n    @property\n    def is_on(self):  # noqa: D102",
        "detail": "custom_components.myskoda.binary_sensor",
        "documentation": {}
    },
    {
        "label": "DoorsLocked",
        "kind": 6,
        "importPath": "custom_components.myskoda.binary_sensor",
        "description": "custom_components.myskoda.binary_sensor",
        "peekOfCode": "class DoorsLocked(StatusBinarySensor):\n    \"\"\"Detect whether the doors are locked.\"\"\"\n    entity_description = BinarySensorEntityDescription(\n        key=\"doors_locked\",\n        name=\"Doors Locks\",\n        device_class=BinarySensorDeviceClass.LOCK,\n        translation_key=\"doors_locked\",\n    )\n    @property\n    def is_on(self):  # noqa: D102",
        "detail": "custom_components.myskoda.binary_sensor",
        "documentation": {}
    },
    {
        "label": "DoorsOpen",
        "kind": 6,
        "importPath": "custom_components.myskoda.binary_sensor",
        "description": "custom_components.myskoda.binary_sensor",
        "peekOfCode": "class DoorsOpen(StatusBinarySensor):\n    \"\"\"Detects whether at least one door is open.\"\"\"\n    entity_description = BinarySensorEntityDescription(\n        key=\"doors_open\",\n        name=\"Doors\",\n        device_class=BinarySensorDeviceClass.DOOR,\n        icon=\"mdi:car-door\",\n        translation_key=\"doors_open\",\n    )\n    @property",
        "detail": "custom_components.myskoda.binary_sensor",
        "documentation": {}
    },
    {
        "label": "WindowsOpen",
        "kind": 6,
        "importPath": "custom_components.myskoda.binary_sensor",
        "description": "custom_components.myskoda.binary_sensor",
        "peekOfCode": "class WindowsOpen(StatusBinarySensor):\n    \"\"\"Detects whether at least one window is open.\"\"\"\n    entity_description = BinarySensorEntityDescription(\n        key=\"windows_open\",\n        name=\"Windows\",\n        device_class=BinarySensorDeviceClass.WINDOW,\n        icon=\"mdi:car-door\",\n        translation_key=\"windows_open\",\n    )\n    @property",
        "detail": "custom_components.myskoda.binary_sensor",
        "documentation": {}
    },
    {
        "label": "TrunkOpen",
        "kind": 6,
        "importPath": "custom_components.myskoda.binary_sensor",
        "description": "custom_components.myskoda.binary_sensor",
        "peekOfCode": "class TrunkOpen(StatusBinarySensor):\n    \"\"\"Detects whether the trunk is open.\"\"\"\n    entity_description = BinarySensorEntityDescription(\n        key=\"trunk_open\",\n        name=\"Trunk\",\n        device_class=BinarySensorDeviceClass.OPENING,\n        icon=\"mdi:car\",\n        translation_key=\"trunk_open\",\n    )\n    @property",
        "detail": "custom_components.myskoda.binary_sensor",
        "documentation": {}
    },
    {
        "label": "BonnetOpen",
        "kind": 6,
        "importPath": "custom_components.myskoda.binary_sensor",
        "description": "custom_components.myskoda.binary_sensor",
        "peekOfCode": "class BonnetOpen(StatusBinarySensor):\n    \"\"\"Detects whether the bonnet is open.\"\"\"\n    entity_description = BinarySensorEntityDescription(\n        key=\"bonnet_open\",\n        name=\"Bonnet\",\n        device_class=BinarySensorDeviceClass.OPENING,\n        icon=\"mdi:car\",\n        translation_key=\"bonnet_open\",\n    )\n    @property",
        "detail": "custom_components.myskoda.binary_sensor",
        "documentation": {}
    },
    {
        "label": "SunroofOpen",
        "kind": 6,
        "importPath": "custom_components.myskoda.binary_sensor",
        "description": "custom_components.myskoda.binary_sensor",
        "peekOfCode": "class SunroofOpen(StatusBinarySensor):\n    \"\"\"Detects whether the sunroof is open.\"\"\"\n    entity_description = BinarySensorEntityDescription(\n        key=\"sunroof_open\",\n        name=\"Sunroof\",\n        device_class=BinarySensorDeviceClass.OPENING,\n        icon=\"mdi:car-select\",\n    )\n    @property\n    def is_on(self):  # noqa: D102",
        "detail": "custom_components.myskoda.binary_sensor",
        "documentation": {}
    },
    {
        "label": "LightsOn",
        "kind": 6,
        "importPath": "custom_components.myskoda.binary_sensor",
        "description": "custom_components.myskoda.binary_sensor",
        "peekOfCode": "class LightsOn(StatusBinarySensor):\n    \"\"\"Detects whether the lights are on.\"\"\"\n    entity_description = BinarySensorEntityDescription(\n        key=\"lights_on\",\n        name=\"Lights\",\n        device_class=BinarySensorDeviceClass.LIGHT,\n        icon=\"mdi:car-light-high\",\n        translation_key=\"lights_on\",\n    )\n    @property",
        "detail": "custom_components.myskoda.binary_sensor",
        "documentation": {}
    },
    {
        "label": "MySkodaClimate",
        "kind": 6,
        "importPath": "custom_components.myskoda.climate",
        "description": "custom_components.myskoda.climate",
        "peekOfCode": "class MySkodaClimate(MySkodaEntity, ClimateEntity):\n    \"\"\"Climate control for MySkoda vehicles.\"\"\"\n    entity_description = ClimateEntityDescription(\n        key=\"climate\",\n        name=\"Air Conditioning\",\n        icon=\"mdi:air-conditioner\",\n        translation_key=\"climate\",\n    )\n    _attr_temperature_unit = UnitOfTemperature.CELSIUS\n    _attr_supported_features = (",
        "detail": "custom_components.myskoda.climate",
        "documentation": {}
    },
    {
        "label": "_LOGGER",
        "kind": 5,
        "importPath": "custom_components.myskoda.climate",
        "description": "custom_components.myskoda.climate",
        "peekOfCode": "_LOGGER = logging.getLogger(__name__)\nasync def async_setup_entry(\n    hass: HomeAssistant,\n    config: ConfigEntry,\n    async_add_entities: AddEntitiesCallback,\n    discovery_info: DiscoveryInfoType | None = None,\n) -> None:\n    add_supported_entities(\n        available_entities=[MySkodaClimate],\n        coordinator=hass.data[DOMAIN][config.entry_id][COORDINATOR],",
        "detail": "custom_components.myskoda.climate",
        "documentation": {}
    },
    {
        "label": "ConfigFlow",
        "kind": 6,
        "importPath": "custom_components.myskoda.config_flow",
        "description": "custom_components.myskoda.config_flow",
        "peekOfCode": "class ConfigFlow(BaseConfigFlow, domain=DOMAIN):\n    \"\"\"Handle a config flow for MySkoda.\"\"\"\n    VERSION = 1\n    async def async_step_user(\n        self, user_input: dict[str, Any] | None = None\n    ) -> ConfigFlowResult:\n        \"\"\"Handle the initial step.\"\"\"\n        if user_input is None:\n            return self.async_show_form(\n                step_id=\"user\", data_schema=STEP_USER_DATA_SCHEMA",
        "detail": "custom_components.myskoda.config_flow",
        "documentation": {}
    },
    {
        "label": "CannotConnect",
        "kind": 6,
        "importPath": "custom_components.myskoda.config_flow",
        "description": "custom_components.myskoda.config_flow",
        "peekOfCode": "class CannotConnect(HomeAssistantError):\n    \"\"\"Error to indicate we cannot connect.\"\"\"\nclass InvalidAuth(HomeAssistantError):\n    \"\"\"Error to indicate there is invalid auth.\"\"\"",
        "detail": "custom_components.myskoda.config_flow",
        "documentation": {}
    },
    {
        "label": "InvalidAuth",
        "kind": 6,
        "importPath": "custom_components.myskoda.config_flow",
        "description": "custom_components.myskoda.config_flow",
        "peekOfCode": "class InvalidAuth(HomeAssistantError):\n    \"\"\"Error to indicate there is invalid auth.\"\"\"",
        "detail": "custom_components.myskoda.config_flow",
        "documentation": {}
    },
    {
        "label": "_LOGGER",
        "kind": 5,
        "importPath": "custom_components.myskoda.config_flow",
        "description": "custom_components.myskoda.config_flow",
        "peekOfCode": "_LOGGER = logging.getLogger(__name__)\nSTEP_USER_DATA_SCHEMA = vol.Schema(\n    {\n        vol.Required(\"email\"): str,\n        vol.Required(\"password\"): str,\n    }\n)\nasync def validate_input(hass: HomeAssistant, data: dict[str, Any]) -> None:\n    \"\"\"Check that the inputs are valid.\"\"\"\n    hub = RestApi(async_get_clientsession(hass))",
        "detail": "custom_components.myskoda.config_flow",
        "documentation": {}
    },
    {
        "label": "STEP_USER_DATA_SCHEMA",
        "kind": 5,
        "importPath": "custom_components.myskoda.config_flow",
        "description": "custom_components.myskoda.config_flow",
        "peekOfCode": "STEP_USER_DATA_SCHEMA = vol.Schema(\n    {\n        vol.Required(\"email\"): str,\n        vol.Required(\"password\"): str,\n    }\n)\nasync def validate_input(hass: HomeAssistant, data: dict[str, Any]) -> None:\n    \"\"\"Check that the inputs are valid.\"\"\"\n    hub = RestApi(async_get_clientsession(hass))\n    if not await hub.authenticate(data[\"email\"], data[\"password\"]):",
        "detail": "custom_components.myskoda.config_flow",
        "documentation": {}
    },
    {
        "label": "DOMAIN",
        "kind": 5,
        "importPath": "custom_components.myskoda.const",
        "description": "custom_components.myskoda.const",
        "peekOfCode": "DOMAIN = \"myskoda\"\nCOORDINATOR = \"coordinator\"",
        "detail": "custom_components.myskoda.const",
        "documentation": {}
    },
    {
        "label": "COORDINATOR",
        "kind": 5,
        "importPath": "custom_components.myskoda.const",
        "description": "custom_components.myskoda.const",
        "peekOfCode": "COORDINATOR = \"coordinator\"",
        "detail": "custom_components.myskoda.const",
        "documentation": {}
    },
    {
        "label": "MySkodaDebouncer",
        "kind": 6,
        "importPath": "custom_components.myskoda.coordinator",
        "description": "custom_components.myskoda.coordinator",
        "peekOfCode": "class MySkodaDebouncer(Debouncer[Coroutine[Any, Any, None]]):\n    \"\"\"Class to rate limit calls to MySkoda REST APIs.\"\"\"\n    def __init__(self, hass: HomeAssistant) -> None:\n        \"\"\"Initialize debounce.\"\"\"\n        super.__init__(hass, _LOGGER, cooldown=60.0, immediate=False)\n    async def async_call(self) -> None:\n        \"\"\"Call the intended function.\"\"\"\n        # Restart timer when calling\n        self.async_cancel()\n        await super().async_call()",
        "detail": "custom_components.myskoda.coordinator",
        "documentation": {}
    },
    {
        "label": "State",
        "kind": 6,
        "importPath": "custom_components.myskoda.coordinator",
        "description": "custom_components.myskoda.coordinator",
        "peekOfCode": "class State:\n    vehicles: dict[str, Vehicle]\n    user: User\n    def __init__(self, vehicles: list[Vehicle], user: User) -> None:\n        self.vehicles = {}\n        for vehicle in vehicles:\n            self.vehicles[vehicle.info.vin] = vehicle\n        self.user = user\nclass MySkodaDataUpdateCoordinator(DataUpdateCoordinator[State]):\n    \"\"\"See `DataUpdateCoordinator`.",
        "detail": "custom_components.myskoda.coordinator",
        "documentation": {}
    },
    {
        "label": "MySkodaDataUpdateCoordinator",
        "kind": 6,
        "importPath": "custom_components.myskoda.coordinator",
        "description": "custom_components.myskoda.coordinator",
        "peekOfCode": "class MySkodaDataUpdateCoordinator(DataUpdateCoordinator[State]):\n    \"\"\"See `DataUpdateCoordinator`.\n    This class manages all data from the MySkoda API.\n    \"\"\"\n    myskoda: MySkoda\n    config: ConfigEntry\n    data: State\n    def __init__(self, hass: HomeAssistant, config: ConfigEntry) -> None:\n        \"\"\"Create a new coordinator.\"\"\"\n        super().__init__(",
        "detail": "custom_components.myskoda.coordinator",
        "documentation": {}
    },
    {
        "label": "_LOGGER",
        "kind": 5,
        "importPath": "custom_components.myskoda.coordinator",
        "description": "custom_components.myskoda.coordinator",
        "peekOfCode": "_LOGGER = logging.getLogger(__name__)\nclass MySkodaDebouncer(Debouncer[Coroutine[Any, Any, None]]):\n    \"\"\"Class to rate limit calls to MySkoda REST APIs.\"\"\"\n    def __init__(self, hass: HomeAssistant) -> None:\n        \"\"\"Initialize debounce.\"\"\"\n        super.__init__(hass, _LOGGER, cooldown=60.0, immediate=False)\n    async def async_call(self) -> None:\n        \"\"\"Call the intended function.\"\"\"\n        # Restart timer when calling\n        self.async_cancel()",
        "detail": "custom_components.myskoda.coordinator",
        "documentation": {}
    },
    {
        "label": "DeviceTracker",
        "kind": 6,
        "importPath": "custom_components.myskoda.device_tracker",
        "description": "custom_components.myskoda.device_tracker",
        "peekOfCode": "class DeviceTracker(MySkodaEntity, TrackerEntity):\n    \"\"\"GPS device tracker for MySkoda.\"\"\"\n    def __init__(self, coordinator: MySkodaDataUpdateCoordinator, vin: str) -> None:  # noqa: D107\n        title = coordinator.data.vehicles[vin].info.specification.title\n        self.entity_description = EntityDescription(\n            name=title,\n            key=f\"{vin}_device_tracker\",\n            translation_key=\"device_tracker\",\n        )\n        super().__init__(coordinator, vin)",
        "detail": "custom_components.myskoda.device_tracker",
        "documentation": {}
    },
    {
        "label": "MySkodaEntity",
        "kind": 6,
        "importPath": "custom_components.myskoda.entity",
        "description": "custom_components.myskoda.entity",
        "peekOfCode": "class MySkodaEntity(CoordinatorEntity):\n    \"\"\"Base class for all entities in the MySkoda integration.\"\"\"\n    vin: str\n    coordinator: MySkodaDataUpdateCoordinator\n    def __init__(\n        self,\n        coordinator: MySkodaDataUpdateCoordinator,\n        vin: str,\n    ) -> None:  # noqa: D107\n        super().__init__(coordinator)",
        "detail": "custom_components.myskoda.entity",
        "documentation": {}
    },
    {
        "label": "MySkodaNumber",
        "kind": 6,
        "importPath": "custom_components.myskoda.number",
        "description": "custom_components.myskoda.number",
        "peekOfCode": "class MySkodaNumber(MySkodaEntity, NumberEntity):\n    \"\"\"Number Entity.\n    Base class for all number entities in the MySkoda integration.\n    \"\"\"\n    pass\nclass ChargeLimit(MySkodaNumber):\n    \"\"\"Charge limit.\n    Represents the maximum value in percent that the car can be charged to.\n    \"\"\"\n    entity_description = NumberEntityDescription(",
        "detail": "custom_components.myskoda.number",
        "documentation": {}
    },
    {
        "label": "ChargeLimit",
        "kind": 6,
        "importPath": "custom_components.myskoda.number",
        "description": "custom_components.myskoda.number",
        "peekOfCode": "class ChargeLimit(MySkodaNumber):\n    \"\"\"Charge limit.\n    Represents the maximum value in percent that the car can be charged to.\n    \"\"\"\n    entity_description = NumberEntityDescription(\n        key=\"charge_limit\",\n        name=\"Charge Limit\",\n        icon=\"mdi:battery-lock\",\n        native_max_value=100,\n        native_min_value=50,",
        "detail": "custom_components.myskoda.number",
        "documentation": {}
    },
    {
        "label": "_LOGGER",
        "kind": 5,
        "importPath": "custom_components.myskoda.number",
        "description": "custom_components.myskoda.number",
        "peekOfCode": "_LOGGER = logging.getLogger(__name__)\nasync def async_setup_entry(\n    hass: HomeAssistant,\n    config: ConfigEntry,\n    async_add_entities: AddEntitiesCallback,\n    discovery_info: DiscoveryInfoType | None = None,\n) -> None:\n    \"\"\"Set up the sensor platform.\"\"\"\n    add_supported_entities(\n        available_entities=[ChargeLimit],",
        "detail": "custom_components.myskoda.number",
        "documentation": {}
    },
    {
        "label": "MySkodaSensor",
        "kind": 6,
        "importPath": "custom_components.myskoda.sensor",
        "description": "custom_components.myskoda.sensor",
        "peekOfCode": "class MySkodaSensor(MySkodaEntity, SensorEntity):\n    pass\nclass SoftwareVersion(MySkodaSensor):\n    \"\"\"Current software version of a vehicle.\"\"\"\n    entity_description = SensorEntityDescription(\n        key=\"software_version\",\n        name=\"Software Version\",\n        icon=\"mdi:update\",\n        translation_key=\"software_version\",\n    )",
        "detail": "custom_components.myskoda.sensor",
        "documentation": {}
    },
    {
        "label": "SoftwareVersion",
        "kind": 6,
        "importPath": "custom_components.myskoda.sensor",
        "description": "custom_components.myskoda.sensor",
        "peekOfCode": "class SoftwareVersion(MySkodaSensor):\n    \"\"\"Current software version of a vehicle.\"\"\"\n    entity_description = SensorEntityDescription(\n        key=\"software_version\",\n        name=\"Software Version\",\n        icon=\"mdi:update\",\n        translation_key=\"software_version\",\n    )\n    @property\n    def native_value(self):  # noqa: D102",
        "detail": "custom_components.myskoda.sensor",
        "documentation": {}
    },
    {
        "label": "ChargingSensor",
        "kind": 6,
        "importPath": "custom_components.myskoda.sensor",
        "description": "custom_components.myskoda.sensor",
        "peekOfCode": "class ChargingSensor(MySkodaSensor):\n    def _charging(self) -> Charging:\n        charging = self.vehicle.charging\n        if charging is None:\n            raise InvalidCapabilityConfigurationError(\n                self.entity_description.key, self.vehicle\n            )\n        return charging\n    def _status(self) -> ChargingStatus:\n        status = self._charging().status",
        "detail": "custom_components.myskoda.sensor",
        "documentation": {}
    },
    {
        "label": "BatteryPercentage",
        "kind": 6,
        "importPath": "custom_components.myskoda.sensor",
        "description": "custom_components.myskoda.sensor",
        "peekOfCode": "class BatteryPercentage(ChargingSensor):\n    \"\"\"Battery charging state in percent.\"\"\"\n    entity_description = SensorEntityDescription(\n        key=\"battery_percentage\",\n        name=\"Battery Percentage\",\n        icon=\"mdi:battery\",\n        state_class=SensorStateClass.MEASUREMENT,\n        native_unit_of_measurement=PERCENTAGE,\n        device_class=SensorDeviceClass.BATTERY,\n        translation_key=\"battery_percentage\",",
        "detail": "custom_components.myskoda.sensor",
        "documentation": {}
    },
    {
        "label": "ChargingPower",
        "kind": 6,
        "importPath": "custom_components.myskoda.sensor",
        "description": "custom_components.myskoda.sensor",
        "peekOfCode": "class ChargingPower(ChargingSensor):\n    \"\"\"How fast the car is charging in kW.\"\"\"\n    entity_description = SensorEntityDescription(\n        key=\"charging_power\",\n        name=\"Charging Power\",\n        icon=\"mdi:lightning-bolt\",\n        state_class=SensorStateClass.MEASUREMENT,\n        native_unit_of_measurement=UnitOfPower.KILO_WATT,\n        device_class=SensorDeviceClass.POWER,\n        translation_key=\"charging_power\",",
        "detail": "custom_components.myskoda.sensor",
        "documentation": {}
    },
    {
        "label": "RemainingDistance",
        "kind": 6,
        "importPath": "custom_components.myskoda.sensor",
        "description": "custom_components.myskoda.sensor",
        "peekOfCode": "class RemainingDistance(ChargingSensor):\n    \"\"\"Estimated range of an electric vehicle in km.\"\"\"\n    entity_description = SensorEntityDescription(\n        key=\"range\",\n        name=\"Range\",\n        icon=\"mdi:speedometer\",\n        state_class=SensorStateClass.MEASUREMENT,\n        native_unit_of_measurement=UnitOfLength.KILOMETERS,\n        device_class=SensorDeviceClass.DISTANCE,\n        translation_key=\"range\",",
        "detail": "custom_components.myskoda.sensor",
        "documentation": {}
    },
    {
        "label": "TargetBatteryPercentage",
        "kind": 6,
        "importPath": "custom_components.myskoda.sensor",
        "description": "custom_components.myskoda.sensor",
        "peekOfCode": "class TargetBatteryPercentage(ChargingSensor):\n    \"\"\"Charging target of the EV's battery in percent.\"\"\"\n    entity_description = SensorEntityDescription(\n        key=\"target_battery_percentage\",\n        name=\"Target Battery Percentage\",\n        state_class=SensorStateClass.MEASUREMENT,\n        native_unit_of_measurement=PERCENTAGE,\n        icon=\"mdi:percent\",\n        device_class=SensorDeviceClass.BATTERY,\n        translation_key=\"target_battery_percentage\",",
        "detail": "custom_components.myskoda.sensor",
        "documentation": {}
    },
    {
        "label": "Mileage",
        "kind": 6,
        "importPath": "custom_components.myskoda.sensor",
        "description": "custom_components.myskoda.sensor",
        "peekOfCode": "class Mileage(MySkodaSensor):\n    \"\"\"The vehicle's mileage (total kilometers driven).\"\"\"\n    entity_description = SensorEntityDescription(\n        key=\"milage\",\n        name=\"Milage\",\n        state_class=SensorStateClass.TOTAL_INCREASING,\n        native_unit_of_measurement=UnitOfLength.KILOMETERS,\n        icon=\"mdi:counter\",\n        device_class=SensorDeviceClass.DISTANCE,\n        translation_key=\"milage\",",
        "detail": "custom_components.myskoda.sensor",
        "documentation": {}
    },
    {
        "label": "ChargeType",
        "kind": 6,
        "importPath": "custom_components.myskoda.sensor",
        "description": "custom_components.myskoda.sensor",
        "peekOfCode": "class ChargeType(ChargingSensor):\n    \"\"\"How the vehicle is being charged (AC/DC).\"\"\"\n    entity_description = SensorEntityDescription(\n        key=\"charge_type\",\n        name=\"Charge Type\",\n        translation_key=\"charge_type\",\n    )\n    @property\n    def native_value(self):  # noqa: D102\n        return self._status().charge_type",
        "detail": "custom_components.myskoda.sensor",
        "documentation": {}
    },
    {
        "label": "ChargingState",
        "kind": 6,
        "importPath": "custom_components.myskoda.sensor",
        "description": "custom_components.myskoda.sensor",
        "peekOfCode": "class ChargingState(ChargingSensor):\n    \"\"\"Current state of charging (ready, charging, conserving, ...).\"\"\"\n    entity_description = SensorEntityDescription(\n        key=\"charging_state\",\n        name=\"Charging State\",\n        device_class=SensorDeviceClass.ENUM,\n        translation_key=\"charging_state\",\n    )\n    _attr_options = [\n        \"CONNECT_CABLE\",",
        "detail": "custom_components.myskoda.sensor",
        "documentation": {}
    },
    {
        "label": "RemainingChargingTime",
        "kind": 6,
        "importPath": "custom_components.myskoda.sensor",
        "description": "custom_components.myskoda.sensor",
        "peekOfCode": "class RemainingChargingTime(ChargingSensor):\n    \"\"\"Estimation on when the vehicle will be fully charged.\"\"\"\n    entity_description = SensorEntityDescription(\n        key=\"remaining_charging_time\",\n        name=\"Remaining Charging Time\",\n        device_class=SensorDeviceClass.DURATION,\n        native_unit_of_measurement=UnitOfTime.MINUTES,\n        icon=\"mdi:timer\",\n        translation_key=\"remaining_charging_time\",\n    )",
        "detail": "custom_components.myskoda.sensor",
        "documentation": {}
    },
    {
        "label": "LastUpdated",
        "kind": 6,
        "importPath": "custom_components.myskoda.sensor",
        "description": "custom_components.myskoda.sensor",
        "peekOfCode": "class LastUpdated(MySkodaSensor):\n    \"\"\"Timestamp of when the car has sent the last update to the MySkoda server.\"\"\"\n    entity_description = SensorEntityDescription(\n        key=\"car_captured\",\n        name=\"Last Updated\",\n        device_class=SensorDeviceClass.TIMESTAMP,\n        icon=\"mdi:clock\",\n        translation_key=\"car_captured\",\n    )\n    def _status(self) -> Status:",
        "detail": "custom_components.myskoda.sensor",
        "documentation": {}
    },
    {
        "label": "MySkodaSwitch",
        "kind": 6,
        "importPath": "custom_components.myskoda.switch",
        "description": "custom_components.myskoda.switch",
        "peekOfCode": "class MySkodaSwitch(MySkodaEntity, SwitchEntity):\n    \"\"\"Base class for all switches in the MySkoda integration.\"\"\"\n    pass\nclass WindowHeating(MySkodaSwitch):\n    \"\"\"Controls window heating.\"\"\"\n    entity_description = SwitchEntityDescription(\n        key=\"window_heating\",\n        name=\"Window Heating\",\n        icon=\"mdi:car-defrost-front\",\n        device_class=SwitchDeviceClass.SWITCH,",
        "detail": "custom_components.myskoda.switch",
        "documentation": {}
    },
    {
        "label": "WindowHeating",
        "kind": 6,
        "importPath": "custom_components.myskoda.switch",
        "description": "custom_components.myskoda.switch",
        "peekOfCode": "class WindowHeating(MySkodaSwitch):\n    \"\"\"Controls window heating.\"\"\"\n    entity_description = SwitchEntityDescription(\n        key=\"window_heating\",\n        name=\"Window Heating\",\n        icon=\"mdi:car-defrost-front\",\n        device_class=SwitchDeviceClass.SWITCH,\n    )\n    def _air_conditioning(self) -> AirConditioning:\n        air_conditioning = self.vehicle.air_conditioning",
        "detail": "custom_components.myskoda.switch",
        "documentation": {}
    },
    {
        "label": "ChargingSwitch",
        "kind": 6,
        "importPath": "custom_components.myskoda.switch",
        "description": "custom_components.myskoda.switch",
        "peekOfCode": "class ChargingSwitch(MySkodaSwitch):\n    def _charging(self) -> Charging:\n        charging = self.vehicle.charging\n        if charging is None:\n            raise InvalidCapabilityConfigurationError(\n                self.entity_description.key, self.vehicle\n            )\n        return charging\n    def _settings(self) -> Settings:\n        settings = self._charging().settings",
        "detail": "custom_components.myskoda.switch",
        "documentation": {}
    },
    {
        "label": "BatteryCareMode",
        "kind": 6,
        "importPath": "custom_components.myskoda.switch",
        "description": "custom_components.myskoda.switch",
        "peekOfCode": "class BatteryCareMode(ChargingSwitch):\n    \"\"\"Controls battery care mode.\"\"\"\n    entity_description = SwitchEntityDescription(\n        key=\"battery_care_mode\",\n        name=\"Battery Care Mode\",\n        icon=\"mdi:battery-heart-variant\",\n        device_class=SwitchDeviceClass.SWITCH,\n    )\n    @property\n    def is_on(self) -> bool | None:  # noqa: D102",
        "detail": "custom_components.myskoda.switch",
        "documentation": {}
    },
    {
        "label": "ReducedCurrent",
        "kind": 6,
        "importPath": "custom_components.myskoda.switch",
        "description": "custom_components.myskoda.switch",
        "peekOfCode": "class ReducedCurrent(ChargingSwitch):\n    \"\"\"Control whether to charge with reduced current.\"\"\"\n    entity_description = SwitchEntityDescription(\n        key=\"reduced_current\",\n        name=\"Reduced Current\",\n        icon=\"mdi:current-ac\",\n        device_class=SwitchDeviceClass.SWITCH,\n    )\n    @property\n    def is_on(self) -> bool | None:  # noqa: D102",
        "detail": "custom_components.myskoda.switch",
        "documentation": {}
    },
    {
        "label": "EnableCharging",
        "kind": 6,
        "importPath": "custom_components.myskoda.switch",
        "description": "custom_components.myskoda.switch",
        "peekOfCode": "class EnableCharging(ChargingSwitch):\n    \"\"\"Control whether the vehicle should be charging.\"\"\"\n    entity_description = SwitchEntityDescription(\n        key=\"charging\",\n        name=\"Charging\",\n        icon=\"mdi:power-plug-battery\",\n        device_class=SwitchDeviceClass.SWITCH,\n    )\n    @property\n    def is_on(self) -> bool | None:  # noqa: D102",
        "detail": "custom_components.myskoda.switch",
        "documentation": {}
    },
    {
        "label": "_LOGGER",
        "kind": 5,
        "importPath": "custom_components.myskoda.switch",
        "description": "custom_components.myskoda.switch",
        "peekOfCode": "_LOGGER = logging.getLogger(__name__)\nasync def async_setup_entry(\n    hass: HomeAssistant,\n    config: ConfigEntry,\n    async_add_entities: AddEntitiesCallback,\n    discovery_info: DiscoveryInfoType | None = None,\n) -> None:\n    \"\"\"Set up the sensor platform.\"\"\"\n    add_supported_entities(\n        available_entities=[",
        "detail": "custom_components.myskoda.switch",
        "documentation": {}
    },
    {
        "label": "InvalidCapabilityConfigurationError",
        "kind": 6,
        "importPath": "custom_components.myskoda.utils",
        "description": "custom_components.myskoda.utils",
        "peekOfCode": "class InvalidCapabilityConfigurationError(Exception):\n    def __init__(self, key: str, vehicle: Vehicle) -> None:\n        super().__init__(\n            f\"Entity '{key}' has a bad capability configuration for vehicle '{vehicle.info.get_model_name()}'.\"\n        )",
        "detail": "custom_components.myskoda.utils",
        "documentation": {}
    },
    {
        "label": "add_supported_entities",
        "kind": 2,
        "importPath": "custom_components.myskoda.utils",
        "description": "custom_components.myskoda.utils",
        "peekOfCode": "def add_supported_entities(\n    available_entities: list[\n        Callable[[MySkodaDataUpdateCoordinator, str], MySkodaEntity]\n    ],\n    coordinator: MySkodaDataUpdateCoordinator,\n    async_add_entities: AddEntitiesCallback,\n) -> None:\n    entities = []\n    for vin in coordinator.data.vehicles:\n        for SensorClass in available_entities:",
        "detail": "custom_components.myskoda.utils",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "venv.bin.jp",
        "description": "venv.bin.jp",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('expression')\n    parser.add_argument('-f', '--filename',\n                        help=('The filename containing the input data.  '\n                              'If a filename is not given then data is '\n                              'read from stdin.'))\n    parser.add_argument('--ast', action='store_true',\n                        help=('Pretty print the AST, do not search the data.'))\n    args = parser.parse_args()",
        "detail": "venv.bin.jp",
        "documentation": {}
    }
]